{"version":3,"sources":["Columns.js","Rows.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","row","background","props","odd","Columns","column_name","value","classes","length","slice","TableCell","className","text","style","minWidth","maxWidth","wordBreak","checkedRow","backgroundColor","Rows","key","columnIndex","columnIndexTwo","numberOfCopy","useState","checked","setChecked","copyStringToClipboard","str","el","document","createElement","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","error","console","log","Fragment","TableRow","map","i","index","Button","size","width","variant","onClick","button","display","alignItems","flexDirection","column","input_container","justifyContent","marginTop","table_container","input_button","fontSize","selector","App","table","setTable","setNumberOfCopy","columnSelector","setColumnSelector","columnSelectorTwo","setColumnSelectorTwo","type","id","onChange","input","getElementById","readXlsxFile","files","then","rows","Select","native","e","target","Table","aria-label","TableHead","TableBody","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5678f4f1.chunk.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n    row: { background: (props) => (props.odd ? '#effefe' : '#fff') },\n}));\n\nfunction Columns({ value, odd }) {\n    const classes = useStyles({ odd });\n    let column_name\n    if (value.length > 6) {\n        column_name = value.slice(0, 6) + \"...\";\n    } else {\n        column_name = value\n    }\n    return (\n        <TableCell className={classes.text} style={{ minWidth: \"20\", maxWidth: \"50\", wordBreak: 'break-all' }}>\n            {column_name}\n        </TableCell>\n    );\n}\nexport default Columns;\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TableCell from '@material-ui/core/TableCell';\nimport 'react-toastify/dist/ReactToastify.css';\nconst useStyles = makeStyles((theme) => ({\n  row: { background: '#fff' },\n  checkedRow: { backgroundColor: '#1abc9c' },\n}));\n\nfunction Rows({ row, key, columnIndex = 0, columnIndexTwo = 0, numberOfCopy }) {\n  const [checked, setChecked] = useState(false);\n\n  const classes = useStyles({ checked });\n\n  function copyStringToClipboard(str) {\n    try {\n      // Create new element\n      var el = document.createElement('textarea');\n      // Set value (string to be copied)\n      el.value = str;\n      // Set non-editable to avoid focus and move outside of view\n      el.setAttribute('readonly', '');\n      el.style = { position: 'absolute', left: '-9999px' };\n      document.body.appendChild(el);\n      // Select text inside element\n      el.select();\n      // Copy text to clipboard\n      document.execCommand('copy');\n      // Remove temporary element\n      document.body.removeChild(el);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setChecked(true);\n    }\n  }\n\n  return (\n    row.length > 0 &&\n    key !== 0 && (\n      <React.Fragment>\n        {checked ? (\n          <TableRow className={classes.checkedRow}>\n            {row.length > 0 &&\n              row.map((i, index) => <TableCell key={index}>{i}</TableCell>)}\n            <TableCell>\n              <Button\n                size='small'\n                width={70}\n                variant='outlined'\n                onClick={() => {\n                  copyStringToClipboard(row[columnIndex]);\n                }}\n                className={classes.button}>\n                copied✓  {' '}\n              </Button>\n            </TableCell>\n            {numberOfCopy === '2' && (\n              <TableCell>\n                <Button\n                  size='small'\n                  width={70}\n                  variant='outlined'\n                  onClick={() => {\n                    copyStringToClipboard(row[columnIndexTwo]);\n                  }}\n                  className={classes.button}>\n                  copied✓  {' '}\n                </Button>\n              </TableCell>\n            )}\n          </TableRow>\n        ) : (\n          <TableRow className={classes.row}>\n            {row.length > 0 &&\n              row.map((i, index) => <TableCell key={index}>{i}</TableCell>)}\n            <TableCell>\n              <Button\n                size='small'\n                width={70}\n                variant='outlined'\n                onClick={() => {\n                  copyStringToClipboard(row[columnIndex]);\n                }}\n                className={classes.button}>\n                copy\n              </Button>\n            </TableCell>\n            {numberOfCopy === '2' && (\n              <TableCell>\n                <Button\n                  size='small'\n                  width={70}\n                  variant='outlined'\n                  onClick={() => {\n                    copyStringToClipboard(row[columnIndexTwo]);\n                  }}\n                  className={classes.button}>\n                  copied\n                </Button>\n              </TableCell>\n            )}\n          </TableRow>\n        )}\n      </React.Fragment>\n    )\n  );\n}\n\nexport default Rows;\n","import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport Columns from './Columns';\nimport readXlsxFile from 'read-excel-file';\nimport { makeStyles } from '@material-ui/core';\nimport Rows from './Rows';\nimport Select from '@material-ui/core/Select';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  column: { backgroundColor: '#bdc3c7' },\n  input_container: {\n    width: '30%',\n    display: 'flex',\n    justifyContent: 'space-around',\n    marginTop: '3%',\n  },\n  table_container: { width: '90%', marginTop: '2%' },\n  input_button: { fontSize: 'calc(0.4vw + 10px)' },\n  selector: { fontSize: 'calc(0.4vw + 10px)' },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [table, setTable] = useState([]);\n  const [numberOfCopy, setNumberOfCopy] = useState('1');\n  const [columnSelector, setColumnSelector] = useState();\n  const [columnSelectorTwo, setColumnSelectorTwo] = useState();\n\n  function read_excel() {\n    const input = document.getElementById('input');\n\n    readXlsxFile(input.files[0]).then((rows) => {\n      // `rows` is an array of rows\n      // each row being an array of cells.\n      setTable(rows);\n    });\n  }\n\n  function create_table() {\n    return (\n      <Table size='small' aria-label='a dense table'>\n        <TableHead>\n          <TableRow className={classes.column}>\n            {table[0].length > 0 &&\n              table[0].map((i, index) => <Columns value={i} key={index} />)}\n            <TableCell>Action1</TableCell>\n            {numberOfCopy === '2' && <TableCell>Action2</TableCell>}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {table.map((row, index) => {\n            if (index !== 0) {\n              return (\n                <Rows\n                  row={row}\n                  key={index}\n                  columnIndex={columnSelector}\n                  columnIndexTwo={columnSelectorTwo}\n                  numberOfCopy={numberOfCopy}\n                />\n              );\n            }\n          })}\n        </TableBody>\n      </Table>\n    );\n  }\n\n  return (\n    <div className={classes.body}>\n      <div className={classes.input_container}>\n        <input\n          type='file'\n          size='600'\n          id='input'\n          onChange={read_excel}\n          className={classes.input_button}\n        />\n        <Select\n          native\n          value={numberOfCopy}\n          onChange={(e) => {\n            setNumberOfCopy(e.target.value);\n          }}\n          className={classes.selector}>\n          <option value={1}>1</option>\n          <option value={2}>2</option>\n        </Select>\n        <Select\n          native\n          value={columnSelector}\n          onChange={(e) => setColumnSelector(e.target.value)}\n          className={classes.selector}>\n          {table.length > 0 &&\n            table[0].map((row, index) => (\n              <option value={index} key={index}>\n                {row}\n              </option>\n            ))}\n        </Select>\n        {numberOfCopy === '2' && (\n          <Select\n            native\n            value={columnSelectorTwo}\n            onChange={(e) => {\n              setColumnSelectorTwo(e.target.value);\n              console.log(columnSelectorTwo);\n            }}\n            className={classes.selector}>\n            {table.length > 0 &&\n              table[0].map((row, index) => (\n                <option value={index} key={index}>\n                  {row}\n                </option>\n              ))}\n          </Select>\n        )}\n      </div>\n      <div className={classes.table_container}>\n        {table.length > 0 && create_table()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}