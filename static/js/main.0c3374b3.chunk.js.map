{"version":3,"sources":["Columns.js","Rows.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","row","background","props","odd","Columns","column_name","value","classes","length","slice","TableCell","className","text","style","minWidth","maxWidth","wordBreak","checkedRow","backgroundColor","Rows","key","columnIndex","useState","checked","setChecked","copyStringToClipboard","str","el","document","createElement","setAttribute","position","left","body","appendChild","select","execCommand","removeChild","error","console","log","Fragment","TableRow","map","i","index","Button","size","width","variant","onClick","button","display","alignItems","flexDirection","column","input_container","justifyContent","marginTop","table_container","input_button","fontSize","selector","App","table","setTable","columnSelector","setColumnSelector","type","id","onChange","input","getElementById","readXlsxFile","files","then","rows","Select","native","e","target","Table","aria-label","TableHead","TableBody","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0c3374b3.chunk.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n    row: { background: (props) => (props.odd ? '#effefe' : '#fff') },\n}));\n\nfunction Columns({ value, odd }) {\n    const classes = useStyles({ odd });\n    let column_name\n    if (value.length > 6) {\n        column_name = value.slice(0, 6) + \"...\";\n    } else {\n        column_name = value\n    }\n    return (\n        <TableCell className={classes.text} style={{ minWidth: \"20\", maxWidth: \"50\", wordBreak: 'break-all' }}>\n            {column_name}\n        </TableCell>\n    );\n}\nexport default Columns;\n","/* eslint-disable react/display-name */\nimport React, { useState } from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TableCell from '@material-ui/core/TableCell';\nimport 'react-toastify/dist/ReactToastify.css';\nconst useStyles = makeStyles((theme) => ({\n  row: { background: '#fff' },\n  checkedRow: { backgroundColor: '#1abc9c' },\n}));\n\nfunction Rows({ row, key, columnIndex = 0 }) {\n  const [checked, setChecked] = useState(false);\n\n  const classes = useStyles({ checked });\n\n  function copyStringToClipboard(str) {\n    try {\n      // Create new element\n      var el = document.createElement('textarea');\n      // Set value (string to be copied)\n      el.value = str;\n      // Set non-editable to avoid focus and move outside of view\n      el.setAttribute('readonly', '');\n      el.style = { position: 'absolute', left: '-9999px' };\n      document.body.appendChild(el);\n      // Select text inside element\n      el.select();\n      // Copy text to clipboard\n      document.execCommand('copy');\n      // Remove temporary element\n      document.body.removeChild(el);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setChecked(true);\n    }\n  }\n\n  return (\n    row.length > 0 &&\n    key !== 0 && (\n      <React.Fragment>\n        {checked ? (\n          <TableRow className={classes.checkedRow}>\n            {row.length > 0 &&\n              row.map((i, index) => <TableCell key={index}>{i}</TableCell>)}\n            <TableCell>\n              <Button\n                size='small'\n                width={70}\n                variant='outlined'\n                onClick={() => {\n                  copyStringToClipboard(row[columnIndex]);\n                }}\n                className={classes.button}>\n                copied✓  {' '}\n              </Button>\n            </TableCell>\n          </TableRow>\n        ) : (\n          <TableRow className={classes.row}>\n            {row.length > 0 &&\n              row.map((i, index) => <TableCell key={index}>{i}</TableCell>)}\n            <TableCell>\n              <Button\n                size='small'\n                width={70}\n                variant='outlined'\n                onClick={() => {\n                  copyStringToClipboard(row[columnIndex]);\n                }}\n                className={classes.button}>\n                copy\n              </Button>\n            </TableCell>\n          </TableRow>\n        )}\n      </React.Fragment>\n    )\n  );\n}\n\nexport default Rows;\n","import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport Columns from './Columns';\nimport readXlsxFile from 'read-excel-file';\nimport { makeStyles } from '@material-ui/core';\nimport Rows from './Rows';\nimport Select from '@material-ui/core/Select';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  column: { backgroundColor: '#bdc3c7' },\n  input_container: {\n    width: '30%',\n    display: 'flex',\n    justifyContent: 'space-around',\n    marginTop: '3%',\n  },\n  table_container: { width: '90%', marginTop: '2%' },\n  input_button: { fontSize: 'calc(0.4vw + 10px)' },\n  selector: { fontSize: 'calc(0.4vw + 10px)' },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [table, setTable] = useState([]);\n  const [columnSelector, setColumnSelector] = useState();\n\n  function read_excel() {\n    const input = document.getElementById('input');\n\n    readXlsxFile(input.files[0]).then((rows) => {\n      // `rows` is an array of rows\n      // each row being an array of cells.\n      setTable(rows);\n    });\n  }\n\n  function create_table() {\n    return (\n      <Table size='small' aria-label='a dense table'>\n        <TableHead>\n          <TableRow className={classes.column}>\n            {table[0].length > 0 &&\n              table[0].map((i, index) => <Columns value={i} key={index} />)}\n            <TableCell>Action</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {table.map((row, index) => {\n            if (index !== 0) {\n              return (\n                <Rows row={row} key={index} columnIndex={columnSelector} />\n              );\n            }\n          })}\n        </TableBody>\n      </Table>\n    );\n  }\n\n  return (\n    <div className={classes.body}>\n      <div className={classes.input_container}>\n        <input\n          type='file'\n          size='600'\n          id='input'\n          onChange={read_excel}\n          className={classes.input_button}\n        />\n        <Select\n          native\n          value={columnSelector}\n          onChange={(e) => setColumnSelector(e.target.value)}\n          className={classes.selector}>\n          {table.length > 0 &&\n            table[0].map((row, index) => (\n              <option value={index} key={index}>\n                {row}\n              </option>\n            ))}\n        </Select>\n      </div>\n      <div className={classes.table_container}>\n        {table.length > 0 && create_table()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}